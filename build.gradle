plugins {
    id 'org.springframework.boot' version "${spring_boot_version}"
    id 'io.spring.dependency-management' version "${spring_boot_dependency_management}"
    id 'com.google.cloud.tools.jib' version "${jib_plugin_version}"
    id "com.github.node-gradle.node" version "${gradle_node_plugin_version}"
    id 'java'
}

group = 'com.datawheel'
version = "${app_version}"
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    compile 'com.vladmihalcea:hibernate-types-52:2.3.4'
    compile "org.hibernate.validator:hibernate-validator"
    compileOnly 'org.projectlombok:lombok:1.18.12'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation "org.apache.commons:commons-lang3"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    runtimeOnly 'org.postgresql:postgresql'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testImplementation "com.h2database:h2"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

test {
    useJUnitPlatform()
}

// Configure JIB to build docker image of the application
jib {
    from {
        image = "openjdk:8-jre-alpine"
    }
    to {
        image = "${rootProject.name.toLowerCase()}"
        tags = ["${project.version}".toString(), "latest"]
    }
    container {
        entrypoint = ["./entrypoint.sh"]
        ports = ["8080"]
        environment = [
            SPRING_OUTPUT_ANSI_ENABLED: "ALWAYS",
        ]
        creationTime = "USE_CURRENT_TIMESTAMP"
    }
    extraDirectories {
        paths = file("src/main/jib")
        permissions = ["/entrypoint.sh": "755"]
    }
}

// Configure gradle node plugin
node {
    version = "${node_version}"
    npmVersion = "${npm_version}"
    yarnVersion = "${yarn_version}"
    download = true
}

if (project.hasProperty("prod")) {
    task webpack(type: NpmTask, dependsOn: "npmInstall") {
        args = ["run", "webpack:prod"]
        environment = [APP_VERSION: project.version]
    }
} else {
    task webpack(type: NpmTask, dependsOn: "npmInstall") {
        args = ["run", "webpack:build"]
        environment = [APP_VERSION: project.version]
    }
}


defaultTasks "build"

bootJar.dependsOn webpack
bootRun.dependsOn webpack
